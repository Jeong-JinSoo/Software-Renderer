레스터라이저란?
그래픽스 파이프라인에서 **벡터 형태의 도형(주로 삼각형)**을 화면의 픽셀 그리드로 변환하는 과정
을 나타내는 핵심 단계.
3D 공간에서 정의된 도형을 2D 이미지로 찍어내는 작업.

역할
1. 화면 공간(Screen Space)좌표계에서 삼각형의 정의
	- 정점 셰이더를 거쳐 투영되고 뷰포트 변환까지 마친 삼각형을 사용
2. 바운딩 박스 내의 픽셀들 조사
	- 삼각형이 포함 될 수 있는 최소 삼각형(AABB, Axis-Ailgned Bounding Box)를 기준으로 함
3. 각 픽셀이 삼각형 내부인지 검사.
	- 보통 바리센트릭 좌표(Barycentric coordinates)를 사용해서 내부/외부 여부를 판단
4. z-buffer(depth), 텍스처 좌표, 색상 등 보간
	- 삼각형의 세 정점에 있는 값을 픽셀 단위로 보간해서 사용
5. 픽셀셰이더 또는 자체 계산을 통해 최종 색 결정

예시
삼각형이 화면 좌표계에서 다음 세 꼭짓점을 가진다고 해보자.
A(100, 100), B(300, 100), C(200, 300)
레스터라이저는 이 삼각형이 화면상에서 어떤 픽셀을 채워야 하는지 계산해주고, 각 픽셀의 색상이나
텍스처 좌표도 함께 지정해준다.

단계별로는
1. 삼각형 어셈블리
2. 삼각형의 바운딩 박스 계산
3. 픽셀 내부 판정 (엣지 함수)
4. 바리센터릭 보간
5. 퍼스펙티브 보정
6. 깊이 테스트
7. 셰이딩 & 텍스처 셈플링

RasterizerTriagle() 함수 구현.
- Triangle 구조체는 tri.v[i] 안에 화면 좌표(x,y), 깊이(z), wInv, UV(u,v)을 모두 담고 있다.
- ComputeBoundingBox와 EdgeFunction이 구현되어 있다.
- frameBuffer는 크기 screenWidth*screenHeight의 uint_t배열(ARGB32 또는 RGB24형식),
	depthBuffer는 같은 크기의 float 배열로, 초기값은 매우 큰 값으로 채워져 있다.
- Texture::Sample(u,v) 메서드가 (u,v)에서 uint32_t색을 반환한다.

이걸 하면서 framebuffer와 뎁스 버퍼가 필요해졌다.
왜냐하면 지금까지는 점 위치를 계산해서 점과 점을 DrawLine()으로 이어그리기 였는데 지금 부턴
이어 그리기가 아니라 화면에 도형이 그려질 픽셀에 점찍기로 바뀌었거든. 기존 그리기 방식이 사용되
지 않게 되어 vector<uint32_t> framebuffer와 vector<float>depthbuffer를 새로 추가했다.

2025년 06월 3일 추가
라인레스터 라이저가 필요해 졌다.
왜냐면 지금 기즈모와 바닥용 그리드 오브젝트를 만들어야 한다.

그러면 기존 레스터라이징과 별개로 라인레스터라이저가 필요하기 때문에 추가.

앵? 그게 뭐죠?
쿼터니언, 엣지 함수, 바리센트릭 좌표, 